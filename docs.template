# Machine [![GoDoc](https://godoc.org/github.com/autom8ter/machine?status.svg)](https://godoc.org/github.com/autom8ter/machine)

     import "github.com/autom8ter/machine"

     m := machine.New(ctx,
     	machine.WithMaxRoutines(10),
     	machine.WithMiddlewares(machine.PanicRecover()),
     )
     defer m.Close()

     channelName := "acme.com"

     // start a goroutine that subscribes to all messages sent to the target channel for 5 seconds
     m.Go(func(routine Routine) {
     	routine.Subscribe(channelName, func(obj interface{}) {
     		fmt.Printf("%v | subscription msg received! channel = %v msg = %v stats = %s\n", routine.PID(), channelName, obj, m.Stats().String())
     	})
     }, GoWithTags("subscribe"),
        GoWithTimeout(5 *time.Second),
     )

    // start another goroutine that publishes to the target channel every second for 5 seconds
     m.Go(func(routine Routine) {
     	fmt.Printf("%v | streaming msg to channel = %v stats = %s\n", routine.PID(), channelName, routine.Machine().Stats().String())
     	// publish message to channel
     	routine.Publish(channelName, "hey there bud!")
     }, GoWithTags("publish"),
        GoWithTimeout(5 *time.Second),
     	GoWithMiddlewares(
     	    // run every second until context cancels
     		Cron(time.NewTicker(1*time.Second)),
     	),
     )

    m.Wait()


Machine is a zero dependency runtime for managed goroutines. It is inspired by errgroup.Group with extra bells & whistles:

- throttled goroutines

- self-cancellable goroutines with context

- global-cancellable goroutines with context (see Cancel)

- goroutines have IDs and optional tags for easy debugging(see Stats)

- publish/subscribe to channels for passing messages between goroutines

- middlewares for wrapping/decorating functions

- "sub" machines for creating a dependency tree between groups of goroutines

- greater than 80% test coverage

- goroutine leak prevention

## Examples

All examples are < 500 lines of code(excluding code generation)

- [gRPC Bidirectional Chat Stream Server](examples/README.md#grpc-bidirectional-chat-server)
- [TCP Reverse Proxy](examples/README.md#tcp-reverse-proxy)
- [Concurrent Cron Job Server](examples/README.md#concurrent-cron-server)

{{ .EmitUsage }}